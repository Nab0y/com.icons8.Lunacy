name: Update Lunacy

on:
  schedule:
    # Run daily at 12:00 UTC
    - cron: '0 12 * * *'
  workflow_dispatch:

jobs:
  update:
    # Only run on the original flathub repository, not on forks
    if: github.repository == 'flathub/com.icons8.Lunacy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4

      - name: Check for updates and update manifest
        id: update
        run: |
          python3 << 'EOF'
          import requests
          import re
          import hashlib
          import os
          from bs4 import BeautifulSoup

          # Get release notes page
          response = requests.get('https://docs.icons8.com/release-notes')
          soup = BeautifulSoup(response.text, 'html.parser')

          # Extract latest version using the existing pattern
          pattern = r'https://\S+/setup/Lunacy_([0-9.]+)\.deb'
          matches = re.findall(pattern, response.text)
          
          if not matches:
              print("No version found")
              exit(0)
              
          latest_version = matches[0]
          print(f"Latest version: {latest_version}")

          # Extract release notes for this version (optional, don't fail if it doesn't work)
          def extract_release_notes(version):
              """Extract release notes for specific version - fail silently if structure changes"""
              try:
                  # Find heading with version number
                  for heading in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']):
                      if version in heading.get_text():
                          # Get the list of changes after the heading
                          next_elem = heading
                          # Skip release date and download links, find <ul>
                          for _ in range(5):  # Check more siblings
                              next_elem = next_elem.find_next_sibling()
                              if next_elem and next_elem.name == 'ul':
                                  break
                          
                          # Check if we found <ul> with changes
                          if next_elem and next_elem.name == 'ul':
                              changes = []
                              for li in next_elem.find_all('li'):
                                  change_text = li.get_text().strip()
                                  if change_text:
                                      changes.append(change_text)
                              if changes:
                                  return changes
                  return []
              except Exception as e:
                  print(f"Warning: Could not extract release notes (non-critical): {e}")
                  return []

          release_notes = extract_release_notes(latest_version)
          if release_notes:
              print(f"Successfully extracted {len(release_notes)} release notes for {latest_version}")
          else:
              print(f"No release notes found for {latest_version} (will proceed with update anyway)")

          # Load current manifest and extract current version
          with open('com.icons8.Lunacy.yml', 'r') as f:
              yaml_content = f.read()

          # Extract current version from x64 URL in YAML content
          current_match = re.search(r'url: https://lcdn\.icons8\.com/setup/Lunacy_([0-9.]+)\.deb', yaml_content)
          if not current_match:
              print("Could not extract current version")
              exit(1)
              
          current_version = current_match.group(1)
          print(f"Current version: {current_version}")

          if current_version == latest_version:
              print("Already up to date")
              exit(0)

          # Build new URLs
          x64_url = f"https://lcdn.icons8.com/setup/Lunacy_{latest_version}.deb"
          arm64_url = f"https://lcdn.icons8.com/setup/lunacy_{latest_version}_arm64.deb"

          def get_file_info(url):
              """Download file and get size and hash"""
              print(f"Downloading {url}")
              response = requests.get(url, stream=True)
              if response.status_code != 200:
                  raise Exception(f"Failed to download {url}: {response.status_code}")
              
              content = response.content
              size = len(content)
              sha256 = hashlib.sha256(content).hexdigest()
              return size, sha256

          def update_yaml_extra_data(yaml_content, x64_url, x64_size, x64_sha256, arm64_url, arm64_size, arm64_sha256):
              """Update URLs, sizes and hashes for extra-data sources preserving formatting"""
              
              # Update x64 source (first extra-data block)
              x64_pattern = r'(- type: extra-data\s+filename: Lunacy\.deb\s+url: )https://lcdn\.icons8\.com/setup/Lunacy_[0-9.]+\.deb(\s+sha256: )[a-f0-9]{64}(\s+size: )\d+'
              x64_replacement = rf'\g<1>{x64_url}\g<2>{x64_sha256}\g<3>{x64_size}'
              
              if re.search(x64_pattern, yaml_content, re.MULTILINE):
                  yaml_content = re.sub(x64_pattern, x64_replacement, yaml_content, flags=re.MULTILINE)
                  print(f"Updated x64: url={x64_url}, sha256={x64_sha256}, size={x64_size}")
              else:
                  print("ERROR: Could not find x64 extra-data pattern")
                  return None
              
              # Update ARM64 source (second extra-data block)
              arm64_pattern = r'(- type: extra-data\s+filename: Lunacy\.deb\s+url: )https://lcdn\.icons8\.com/setup/lunacy_[0-9.]+_arm64\.deb(\s+sha256: )[a-f0-9]{64}(\s+size: )\d+'
              arm64_replacement = rf'\g<1>{arm64_url}\g<2>{arm64_sha256}\g<3>{arm64_size}'
              
              if re.search(arm64_pattern, yaml_content, re.MULTILINE):
                  yaml_content = re.sub(arm64_pattern, arm64_replacement, yaml_content, flags=re.MULTILINE)
                  print(f"Updated ARM64: url={arm64_url}, sha256={arm64_sha256}, size={arm64_size}")
              else:
                  print("ERROR: Could not find ARM64 extra-data pattern")
                  return None
              
              return yaml_content

          # CRITICAL: Get file info for both architectures - this must work
          try:
              x64_size, x64_sha256 = get_file_info(x64_url)
              arm64_size, arm64_sha256 = get_file_info(arm64_url)
              
              print(f"SUCCESS: Downloaded and verified both architectures")
              print(f"x64: size={x64_size}, sha256={x64_sha256}")
              print(f"arm64: size={arm64_size}, sha256={arm64_sha256}")

          except Exception as e:
              print(f"CRITICAL ERROR: Failed to download/verify files: {e}")
              exit(1)

          # CRITICAL: Update manifest preserving formatting - this must work
          try:
              updated_yaml = update_yaml_extra_data(yaml_content, x64_url, x64_size, x64_sha256, arm64_url, arm64_size, arm64_sha256)
              
              if updated_yaml is None:
                  print("CRITICAL ERROR: Failed to update YAML content")
                  exit(1)

              # Write updated manifest
              with open('com.icons8.Lunacy.yml', 'w') as f:
                  f.write(updated_yaml)
              
              print("SUCCESS: Updated manifest with new URLs, hashes and sizes")

          except Exception as e:
              print(f"CRITICAL ERROR: Failed to update manifest: {e}")
              exit(1)

          # OPTIONAL: Update metainfo.xml with release notes - can fail without breaking update
          def update_metainfo(version, changes):
              """Update metainfo.xml preserving formatting - fail silently if it doesn't work"""
              try:
                  with open('com.icons8.Lunacy.metainfo.xml', 'r') as f:
                      xml_content = f.read()
                  
                  # Check if version already exists
                  if f'version="{version}"' in xml_content:
                      # Find this version's release block and update its description
                      version_pattern = rf'(<release version="{re.escape(version)}"[^>]*>)(.*?)(</release>)'
                      
                      def create_description(changes):
                          if changes:
                              change_items = '\\n          '.join([f'<li>{change}</li>' for change in changes])
                              return (
                                  '\\n        <description>\\n'
                                  '          <ul>\\n'
                                  f'            {change_items}\\n'
                                  '          </ul>\\n'
                                  '        </description>'
                              )
                          else:
                              return '\\n        <description>Update with bug fixes and improvements.</description>'
                      
                      new_description = create_description(changes)
                      replacement = rf'\g<1>{new_description}\n    \g<3>'
                      
                      if re.search(version_pattern, xml_content, re.DOTALL):
                          xml_content = re.sub(version_pattern, replacement, xml_content, flags=re.DOTALL)
                          
                          with open('com.icons8.Lunacy.metainfo.xml', 'w') as f:
                              f.write(xml_content)
                          return True
                  
                  return False
              except Exception:
                  return False
          
          metainfo_updated = update_metainfo(latest_version, release_notes)
          if metainfo_updated:
              print("BONUS: Successfully updated metainfo.xml with release notes")
          else:
              print("WARNING: Could not update metainfo.xml (non-critical)")

          # Set output for next step
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"updated=true\n")
              f.write(f"version={latest_version}\n")
              f.write(f"current_version={current_version}\n")
              f.write(f"metainfo_updated={metainfo_updated}\n")

          print(f"SUCCESS: Update completed for version {latest_version}")
          EOF

      - name: Create Pull Request
        if: steps.update.outputs.updated == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update Lunacy to version ${{ steps.update.outputs.version }}"
          title: "Update Lunacy to version ${{ steps.update.outputs.version }}"
          body: |
            ## Update Lunacy

            - **Current version**: ${{ steps.update.outputs.current_version }}
            - **New version**: ${{ steps.update.outputs.version }}

            This PR updates both x86_64 and aarch64 architectures with correct hashes and file sizes.

            ### Changes
            - ✅ Updated Lunacy.deb URLs for both architectures
            - ✅ Updated SHA256 checksums  
            - ✅ Updated file sizes
            - Release description: ${{ steps.update.outputs.metainfo_updated == 'true' && '✅ Updated with detailed changelog' || '⚠️ Generic description (changelog extraction failed)' }}

            **Auto-merge is enabled** - this PR will be automatically merged after all checks pass.

            **Note**: The core update (URLs, hashes, sizes) always succeeds. Release description update is a bonus feature that may fail if the release notes page structure changes.

            ---
            *Generated by GitHub Actions run #${{ github.run_number }}*
          labels: |
            automated
            stable-update
          assignees: ${{ github.actor }}
          branch: update-lunacy-${{ steps.update.outputs.version }}
          delete-branch: true
        id: create-pr

      - name: Enable auto-merge
        if: steps.create-pr.outputs.pull-request-number
        run: |
          gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} \
            --auto --squash \
            --subject "🤖 Auto-merge: Update Lunacy to ${{ steps.update.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}