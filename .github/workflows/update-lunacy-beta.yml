name: Update Lunacy Beta

on:
  schedule:
    # Run daily 12:15 UTC
    - cron: '15 12 * * *'
  workflow_dispatch:

jobs:
  update:
    # Only run on the original flathub repository, not on forks
    if: github.repository == 'flathub/com.icons8.Lunacy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: beta

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Check for beta updates and update manifest
        id: update
        run: |
          python3 << 'EOF'
          import requests
          import re
          import hashlib
          import os
          import subprocess
          from datetime import datetime
          
          # Beta URLs
          BETA_X64_URL = "https://lcdn.icons8.com/setup/beta/Lunacy.deb"
          BETA_ARM_URL = "https://lcdn.icons8.com/setup/beta/Lunacy.ARM.deb"
          
          def get_deb_version(deb_url):
              """Download deb file and extract version using dpkg-deb"""
              try:
                  print(f"Downloading {deb_url} to check version...")
                  response = requests.get(deb_url, stream=True)
                  if response.status_code != 200:
                      print(f"Failed to download {deb_url}: {response.status_code}")
                      return None
                  
                  # Save to temporary file
                  with open('/tmp/beta_lunacy.deb', 'wb') as f:
                      f.write(response.content)
                  
                  # Get version using dpkg-deb
                  result = subprocess.run(['dpkg-deb', '-f', '/tmp/beta_lunacy.deb', 'Version'], 
                                          capture_output=True, text=True)
                  if result.returncode == 0:
                      version = result.stdout.strip()
                      print(f"Found version: {version}")
                      return version
                  else:
                      print(f"Failed to get version: {result.stderr}")
                      return None
              except Exception as e:
                  print(f"Error getting version from {deb_url}: {e}")
                  return None
          
          def get_remote_file_hash(url):
              """Get SHA256 hash of remote file"""
              print(f"Checking hash for {url}")
              response = requests.get(url, stream=True)
              if response.status_code != 200:
                  raise Exception(f"Failed to download {url}: {response.status_code}")
              
              sha256_hash = hashlib.sha256()
              for chunk in response.iter_content(chunk_size=8192):
                  sha256_hash.update(chunk)
              
              return sha256_hash.hexdigest()
          
          def update_yaml_hashes(yaml_file, x64_hash, arm64_hash=None):
              """Update only SHA256 hashes in YAML file preserving formatting"""
              with open(yaml_file, 'r') as f:
                  content = f.read()
              
              # Pattern to find x64 source block
              x64_pattern = r'(- type: file\s+url: https://lcdn\.icons8\.com/setup/beta/Lunacy\.deb\s+sha256: )([a-f0-9]{64})'
              
              # Update x64 hash
              if re.search(x64_pattern, content, re.MULTILINE):
                  content = re.sub(x64_pattern, r'\g<1>' + x64_hash, content, flags=re.MULTILINE)
                  print(f"Updated x64 hash: {x64_hash}")
              else:
                  print("ERROR: Could not find x64 source pattern")
                  return False
              
              # Pattern to find ARM64 source block
              if arm64_hash:
                  arm64_pattern = r'(- type: file\s+url: https://lcdn\.icons8\.com/setup/beta/Lunacy\.ARM\.deb\s+sha256: )([a-f0-9]{64})'
                  
                  if re.search(arm64_pattern, content, re.MULTILINE):
                      content = re.sub(arm64_pattern, r'\g<1>' + arm64_hash, content, flags=re.MULTILINE)
                      print(f"Updated ARM64 hash: {arm64_hash}")
                  else:
                      print("WARNING: Could not find ARM64 source pattern")
              
              # Write back to file
              with open(yaml_file, 'w') as f:
                  f.write(content)
              
              return True
          
          def update_metainfo_xml(xml_file, version):
              """Add new version to beginning of releases in XML file preserving formatting"""
              with open(xml_file, 'r') as f:
                  content = f.read()
              
              # Check if version already exists
              if f'version="{version}"' in content:
                  print(f"Version {version} already exists in metainfo")
                  return False
              
              # Find the releases opening tag and the first release
              releases_match = re.search(r'(\s*)(<releases>)\s*\n(\s*)(<release)', content)
              
              if not releases_match:
                  print("ERROR: Could not find <releases> tag with existing releases")
                  return False
              
              base_indent = releases_match.group(1)  # indent before <releases>
              release_indent = releases_match.group(3)  # indent before first <release>
              today = datetime.now().strftime('%Y-%m-%d')
              
              # Create new release entry with proper indentation matching existing releases
              new_release = f'''{base_indent}<releases>
          {release_indent}<release version="{version}" date="{today}">
          {release_indent}  <description>
          {release_indent}    <p>Beta release of Lunacy {version} with new features and improvements.</p>
          {release_indent}    <ul>
          {release_indent}      <li>Latest beta version with cutting-edge features</li>
          {release_indent}      <li>Performance improvements and bug fixes</li>
          {release_indent}      <li>Bundled at build time - no download during installation</li>
          {release_indent}    </ul>
          {release_indent}  </description>
          {release_indent}</release>
          {release_indent}<release'''
              
              # Replace <releases> with new release at the top
              content = re.sub(r'(\s*)(<releases>)\s*\n(\s*)(<release)', new_release, content)
              
              # Write back to file
              with open(xml_file, 'w') as f:
                  f.write(content)
              
              print(f"Added version {version} to metainfo.xml")
              return True
          
          # Get current beta version
          current_version = get_deb_version(BETA_X64_URL)
          if not current_version:
              print("Could not get current beta version")
              exit(1)
          
          print(f"Current beta version: {current_version}")
          
          # Load current manifest and extract hashes
          with open('com.icons8.Lunacy.yml', 'r') as f:
              yaml_content = f.read()
          
          # Extract current hashes
          x64_match = re.search(r'url: https://lcdn\.icons8\.com/setup/beta/Lunacy\.deb\s+sha256: ([a-f0-9]{64})', yaml_content, re.MULTILINE)
          arm64_match = re.search(r'url: https://lcdn\.icons8\.com/setup/beta/Lunacy\.ARM\.deb\s+sha256: ([a-f0-9]{64})', yaml_content, re.MULTILINE)
          
          current_x64_hash = x64_match.group(1) if x64_match else ''
          current_arm64_hash = arm64_match.group(1) if arm64_match else ''
          
          print(f"Current x64 hash: {current_x64_hash}")
          print(f"Current ARM64 hash: {current_arm64_hash}")
          
          # Get remote hashes
          try:
              remote_x64_hash = get_remote_file_hash(BETA_X64_URL)
              print(f"Remote x64 hash: {remote_x64_hash}")
              
              remote_arm64_hash = get_remote_file_hash(BETA_ARM_URL)  
              print(f"Remote ARM64 hash: {remote_arm64_hash}")
              
          except Exception as e:
              print(f"Error getting remote hashes: {e}")
              exit(1)
          
          # Check if updates needed
          x64_needs_update = current_x64_hash != remote_x64_hash
          arm64_needs_update = current_arm64_hash != remote_arm64_hash
          
          print(f"x64 needs update: {x64_needs_update}")
          print(f"ARM64 needs update: {arm64_needs_update}")
          
          files_updated = False
          manifest_updated = False
          
          # Update YAML if needed
          if x64_needs_update or arm64_needs_update:
              print("Updating YAML manifest...")
              if update_yaml_hashes('com.icons8.Lunacy.yml', remote_x64_hash, remote_arm64_hash):
                  print("Successfully updated YAML")
                  files_updated = True
                  manifest_updated = True
              else:
                  print("Failed to update YAML")
                  exit(1)
          
          # Update metainfo
          print("Updating metainfo.xml...")
          metainfo_updated = update_metainfo_xml('com.icons8.Lunacy.metainfo.xml', current_version)
          
          if metainfo_updated:
              files_updated = True
          
          # Set output for next step
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"updated={files_updated}\n")
              f.write(f"version={current_version}\n")
              f.write(f"manifest_updated={manifest_updated}\n")
              f.write(f"metainfo_updated={metainfo_updated}\n")
          
          print(f"=== Update completed. Files updated: {files_updated} ===")
          EOF

      - name: Create Pull Request
        if: steps.update.outputs.updated == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: beta-update-${{ github.run_number }}
          base: beta
          commit-message: |
            Update Lunacy Beta to version ${{ steps.update.outputs.version }}

            - Version: ${{ steps.update.outputs.version }}
            - Manifest: ${{ steps.update.outputs.manifest_updated == 'true' && 'Updated' || 'No changes' }}
            - Metainfo: ${{ steps.update.outputs.metainfo_updated == 'true' && 'Updated' || 'No changes' }}

            Auto-generated by GitHub Actions.
          title: "🤖 Update Lunacy Beta to version ${{ steps.update.outputs.version }}"
          body: |
            ## 📦 Automated Beta Update

            **Version:** `${{ steps.update.outputs.version }}`

            ### Changes made:
            - **Manifest:** ${{ steps.update.outputs.manifest_updated == 'true' && '✅ Updated' || '⚪ No changes' }}
            - **Metainfo:** ${{ steps.update.outputs.metainfo_updated == 'true' && '✅ Updated' || '⚪ No changes' }}

            ### Details:
            This PR was automatically created by the scheduled beta update workflow.
            All file hashes have been verified and updated accordingly.

            **Auto-merge is enabled** - this PR will be automatically merged after all checks pass.

            ---
            *Generated by GitHub Actions run #${{ github.run_number }}*
          labels: |
            automated
            beta-update
          assignees: ${{ github.actor }}
          delete-branch: true
          add-paths: |
            com.icons8.Lunacy.yml
            com.icons8.Lunacy.metainfo.xml
        id: create-pr

      - name: Enable auto-merge
        if: steps.create-pr.outputs.pull-request-number
        run: |
          gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} \
            --auto --squash \
            --subject "🤖 Auto-merge: Update Lunacy Beta to ${{ steps.update.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}